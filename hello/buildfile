libs =
#import libs += libhello%lib{hello}

./: exe{hello}
    exe{hello}: {hxx ixx txx cxx}{** -stdafx} $libs liba{stdafx}

cxx.poptions =+ "-I$src_root" "-I$src_base"

# Compile C++ Standard Library headers into an intermediate form that is faster
# to process.
#
<file{stdafx.pch} obja{stdafx.obj}>: cxx{stdafx} hxx{stdafx}
{{
  src = $path($<[0])
  pch = $path($>[0])
  obj = $path($>[1])

  # Flags `/EHsc` and `/utf-8` are inherent to build2 and are therefore
  # independent of our build configuration.
  #
  sys_hdr = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')
  sys_pch = /nologo /EHsc /utf-8 /c /TP /Yc "/Fp$pch" "/Fo$obj"

  # We depend on our build configuration to propagate the runtime and any
  # necessary flags (config.cc.poptions, config.cc.coptions).
  #
  # Note that failing to do so usually doesn't cause the build to fail, but it
  # can lead to unexpected and problematic linking problems.
  #
  poptions = $cxx.poptions $config.cc.poptions $sys_hdr
  coptions = $cxx.coptions $config.cc.coptions $sys_pch

  diag c++ ($<[0])

  $cxx.path $poptions $coptions $cxx.mode $src
}}

[rule_hint=cxx] liba{stdafx}: file{stdafx.pch}:
{
  # Inform target(s) that we will manually handle prerequisites.
  #
  include = adhoc

  # Build the PCH prior to any code that relies on it.
  #
  update = match
}

[rule_hint=cxx] liba{stdafx}: obja{stdafx}
{
  # Export compiler flags necessary for target(s) to consume the PCH.
  #
  cxx.export.poptions += "/Yustdafx.hxx" "/FIstdafx.hxx" "/Fp$out_base/stdafx"

  # Prevent unintended distribution.
  #
  install = false
}

if ($src_root != $out_root)
{
  hxx{stdafx}:
  {{
    s = $src_base/$name($>).hxx
    o = $out_base/$name($>).hxx

    diag cp $>

    # It's necessary to have stdafx.hxx accessible in out_root for input file
    # preprocessing, so we enforce it.
    #
    cp $s $o
  }}
}

# When cc.reprocess is true, the __build2_preprocess is defined during
# dependency extraction. This is used to work around separate preprocessing bugs
# in the compiler.
#
obj{*}: cc.reprocess = true

